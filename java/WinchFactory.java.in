/* smallfoot.org is owned by allan.clark */
package org.smallfoot.filexfer;

import gnu.getopt.Getopt;
import gnu.getopt.LongOpt;
import java.util.TreeSet;
import java.util.Vector;
/* *@DO_GETOPTJAR_TRUE@/        import org.smallfoot.getopt.GetOpt;        /*@DO_GETOPTJAR_TRUE@ */

/**
 * @file
 */

/**
 * WinchFactory is the main entry point for this package; WinchFactory.main() shows how a filetransfer "winch" can be found for a URL, but in general a consumer of this class wants to:
 *   1. use getWinch(String) to find an appropriate winch for a URL
 *   2. exercise the winch using FileTransferWinch.upload(File) or FileTransferWinch.upload(String)
 *   3. reap the rewards of not having to re-code this functionality
 */

public class WinchFactory
{
    /**
     * provides a FileTransferWinch matching the URL given
     *
     * @return populated winch based on the URL given
     * @throws java.net.MalformedURLException if the URL created form the String is malformed
     * @param url URL to connect to
     */
    public static FileTransferWinch getWinch(String url) throws java.net.MalformedURLException
    { return getWinch(new java.net.URL (url)); }

    /**
     * provides a FileTransferWinch matching the URL given
     *
     * @return populated winch based on the URL given
     * @param url URL to connect to
     */
    public static FileTransferWinch getWinch(java.net.URL url)
    {
        if (FTP4J.handles(url))
            return new FTP4J(url);
        if (ApacheCommonsNetSFTP.handles(url))
            return new ApacheCommonsNetSFTP(url);
        else
            return null;
    }


    /**
     * provides an array of example URLs based on the given model by iterating all known Winches
     *
     * @return populated array of examples
     * @param url sample URL to be used in examples
     * @throws java.net.MalformedURLException if the given URL chokes on conversion to a java.net.URL
     */
    public static String[] getWinchExamples(String url) throws java.net.MalformedURLException
    {
        Vector<String> v = new Vector();

        java.net.URL u = new java.net.URL(url);

        /* manual iterative add of each Winch */
        v.addAll(java.util.Arrays.asList(FTP4J.examples(u)));
        v.addAll(java.util.Arrays.asList(ApacheCommonsNetSFTP.examples(u)));

        return v.toArray(new String[0]);
    }



    protected java.util.Vector<FileTransferWinch> getWinches()
    {
        java.util.Vector<FileTransferWinch> w = new java.util.Vector();

        w.add(new FTP4J(null));
        w.add(new ApacheCommonsNetSFTP(null));

        return w;
    }


    static private boolean _reg = false;
    /**
     * stub constructor for the WinchFactory() also appends/writes the system property "java.protocol.handler.pkgs" in accordance with http://docs.oracle.com/javase/7/docs/api/java/net/URL.html
     *
     * NOTE: my own code uses "package1:package2" whereas the example uses "package1|package2"
     */
    public WinchFactory()
    {
        if (false == _reg)
        {
            java.util.Properties p = System.getProperties();

            if ( (null == p.getProperty("java.protocol.handler.pkgs")) || (1 > p.getProperty("java.protocol.handler.pkgs").length()) )
                p.setProperty("java.protocol.handler.pkgs","org.smallfoot.filexfer");
            else
                p.setProperty("java.protocol.handler.pkgs",p.getProperty("java.protocol.handler.pkgs")+"|org.smallfoot.filexfer");

            System.setProperties(p);

            /* http://www.bouncycastle.org/wiki/display/JA1/Provider+Installation */
            java.security.Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
            //boolean reg = org.apache.commons.net.ssh.util.SecurityUtils.isBouncyCastleRegistered();
            //System.out.println("registered: "+reg);

            _reg = true;
        }
    }




    public static void main(String[] args)
    {
        try
        {
            java.lang.ClassLoader.getSystemClassLoader().loadClass("org.slf4j.impl.StaticLoggerBinder");
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        WinchFactory wf = new WinchFactory();
        java.util.Vector<FileTransferWinch> winches = new java.util.Vector();

        java.util.Vector<LongOpt> options = new java.util.Vector(6,2);

        /* Always always ALWAYS provide a quick reference and a version output */
        options.add(new LongOpt("help", LongOpt.NO_ARGUMENT, null, 'H'));
        options.add(new LongOpt("version", LongOpt.NO_ARGUMENT, null, 'V'));

        options.add(new LongOpt("uploadurl", LongOpt.REQUIRED_ARGUMENT, null, 'U'));
        options.add(new LongOpt("upload", LongOpt.REQUIRED_ARGUMENT, null, 'u'));
        options.add(new LongOpt("list", LongOpt.NO_ARGUMENT, null, 'l'));
        options.add(new LongOpt("listwinchexamples", LongOpt.NO_ARGUMENT, null, 'L'));
        options.add(new LongOpt("checkcrypto", LongOpt.NO_ARGUMENT, null, 'X'));

        /* the following two @DO_GETOPTJAR... stuff causes either one or the other line's comment
         * termination to get bombed out -- effectively causing the comment block to continue to
         * the end of the line, where a comment brace awaits to trap the unterminated comment.
         * Somewhat like a cartoon rabbit-trap made of a box baited with a carrot, but this trap
         * causes either one or the other "Getopt g = ..." to be uncommented, effectively honouring
         * the configure-level --with-getoptjar option at compile-time (well, config.status
         * -triggered compiler-parser-time)
         */

        /* *@DO_GETOPTJAR_TRUE@/        Getopt g = new org.smallfoot.getopt.GetOpt("upload", args, options);        /*@DO_GETOPTJAR_TRUE@ */
        /* *@DO_GETOPTJAR_FALSE@/        Getopt g = new gnu.getopt.Getopt("upload", args, "HVU:u:lLX", options);        /@DO_GETOPTJAR_FALSE@* */

        int c;
        while ((c = g.getopt()) != -1)
        {
            switch(c)
            {
            case 'L': /* list winches' examples */
            {
                try
                {
                    for (String s:wf.getWinchExamples("http://scott:tiger@example.com/path/file"))
                        System.out.println("     : "+s);
                }
                catch (java.net.MalformedURLException mue)
                {
                    /* URL string "http://scott:tiger@example.com/path/file" is no good */
                }
            }
            break;

            case 'l': /* list winches */
            {
                TreeSet<String> t = new TreeSet();
                for (FileTransferWinch f: wf.getWinches())
                    t.add(f.getClass().getName().replaceAll("^.*\\.",""));
                for (String s:t)
                    System.out.println("winch: "+s);
            }
            break;

            case 'U': /* add a winch */
                try
                {
                    FileTransferWinch ftw = wf.getWinch(g.getOptarg());
                    if (null != ftw)
                        winches.add(ftw);
                    else System.out.println("No uploader \"winch\" found for url \""+g.getOptarg()+"\"");
                }
                catch (java.net.MalformedURLException mue)
                {
                    System.out.print("Malformed URL Exception processing URL \""+g.getOptarg()+"\"");
                    if (null != mue.getMessage()) System.out.print(": "+mue.getMessage());
                    System.out.println("\nrecheck the URL versus RFC-1738");
                }
                catch (Exception e)
                {
                    System.out.println("Exception processing URL \""+g.getOptarg()+"\": "+e.getMessage());
                    e.printStackTrace();
                }
                break;

            case 'u': /* push a file */
                try
                {
                    //FileTransferWinch f1[] = null;

                    for (FileTransferWinch f: winches)
                    {
                        System.out.println("trying winch: "+f.getClass().getName());
                        f.upload(g.getOptarg(), null);
                        break;
                    }
                }
                catch (Exception e)
                {
                    System.out.println("Exception uploading file \""+g.getOptarg()+"\": "+e.getMessage());
                }
                break;

            case 'X': /* check crypto */
            {
                java.security.Provider p[] = java.security.Security.getProviders();
                for (int i = 0; i < p.length; i++)
                {
                    System.out.println(p[i]);
                    for (java.util.Enumeration<?> e = p[i].keys(); e.hasMoreElements();)
                        System.out.println("\t" + e.nextElement());
                }
            }
            break;

            /*
             * Follows is the "house-keeping": versions, usage, and the catch-all for bad options.
             */
            case 'V':
                System.out.println("@PACKAGE@-@VERSION@.@BUILDID@");
                return;

            default:
            case '?':
            case 'H':
                System.out.println("usage: upload -V|--version|-H|--help");
                System.out.println("       upload -X    (show the crypto available)");
                System.out.println("       upload -U <URL> [-U <URL> [-U <URL>]] -u <file> [-u <file> [-u <file>]]");
                System.out.println("   ie: upload -U sharepoint://scott:tiger@wisdom.example.com/sites/Services/ts/Services%20Schedule/Calendar.xlsx -u Calendar.xlsx");
                break;
            }
        }
    }
}
